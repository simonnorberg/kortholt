buildscript {
    ext.versions = [
            "coroutines" : "1.6.4",
            "compile_sdk": 33,
            "min_sdk"    : 28,
            "target_sdk" : 33,
            "ndk"        : "25.1.8937393",
            "activity"   : "1.6.1",
            "annotation" : "1.5.0",
            "compose"    : "2023.01.00",
            "core"       : "1.9.0",
            "lifecycle"  : "2.5.1",
            "media"      : "1.6.0",
            "relinker"   : "1.4.5"
    ]
}

plugins {
    id "com.android.application" version "7.4.0" apply false
    id "com.android.library" version "7.4.0" apply false
    id "org.jetbrains.kotlin.android" version "1.8.0" apply false
    id "com.diffplug.spotless" version "6.13.0"
    id "com.github.ben-manes.versions" version "0.44.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "dev", "cr", "m"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}

subprojects {
    configurations.configureEach {
        resolutionStrategy {
            eachDependency { details ->
                def group = details.requested.group
                if (group == "androidx.lifecycle") {
                    details.useVersion versions.lifecycle
                }
            }
        }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "11"
            allWarningsAsErrors = true
        }
    }
    apply plugin: "com.diffplug.spotless"
    spotless {
        kotlin {
            target "src/*/java/**/*.kt"
            ktlint("0.48.1").editorConfigOverride([
                    ktlint_code_style: "android",
                    max_line_length  : 120
            ])
        }
    }
}

Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = propOrDef("SONATYPE_STAGING_PROFILE_ID", "")
            username = propOrDef("OSSRH_USERNAME", "")
            password = propOrDef("OSSRH_PASSWORD", "")
        }
    }
}
